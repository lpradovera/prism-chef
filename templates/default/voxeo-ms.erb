#!/bin/sh
# Auto-generated by Chef for <%= node.name %>
#
# Startup script for program
#
# chkconfig: 35 55 25
# description: Prism Media Server
# processname: ms
# pidfile: <%=@prism_path%><%=@pid_file%>/voxeo-ms.pid

# Source function library.      This creates the operating environment for the process to be started
. /etc/init.d/functions

WaitForPidToExit() {
  # check for a maximum of 60 seconds
  local retry=60
  local pid=`cat $PIDFILE`
  local foundpid=

  foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
  while [ -n "$foundpid" -a "$retry" -gt 0 ]; do
    sleep 1
    echo -n "."
    retry=$(($retry -1))
    foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
  done

  # if Process still running, kill it
  if [ -n "$foundpid" ] ; then
    echo ""
    echo $pid " is still running.  Kill it."
    kill -9 `ps -ef | grep $pid | awk '!/grep/ {print $2}'`
  fi
}

PIDFILE=<%=@prism_path%><%=@pid_file%>/voxeo-ms.pid
LOCKFILE=<%=@prism_path%><%=@lock_file%>/voxeo-ms
CURRENT_USER=`id -u -n`

case "$1" in
  start)
    echo -n "Starting  MS: "
    if [ -e $PIDFILE ]; then
      pid=`cat $PIDFILE`
      result=$(ps ax -o pid,command | grep $pid | grep VCS)
      if [ "$result" != "" ]; then
        echo "  Media Server Already running.  Stop it first."
        exit 1
      fi
    fi

    export HOME=<%=@prism_path%>
    export LD_LIBRARY_PATH=<%=@prism_path%>/bin:<%=@prism_path%>/lib:$LD_LIBRARY_PATH$

    if [ "$CURRENT_USER" = <%=@prism_user%> ]; then
      startResult=$(cd <%=@prism_path%>/bin;	<%=@prism_path%>/bin/prism service ms PIDFILE=$PIDFILE 2>&1 >>/dev/null)
    else
      startResult=$(cd <%=@prism_path%>/bin;	su <%=@prism_user%> -p -s /bin/sh -c "<%=@prism_path%>/bin/prism service ms PIDFILE=$PIDFILE 2>&1 >>/dev/null")
    fi

    if [ "$startResult" != "0" ]; then
      echo "  Media Failed to start: $startResult"
      exit $?;
    fi

    echo
      su <%=@prism_user%> -p -s /bin/sh -c "touch $LOCKFILE"
    Â  exit 0;
  ;;

  stop)
    echo -n "Shutting down MS: "
    if [ -e $PIDFILE ]; then
      kill `cat $PIDFILE`
      WaitForPidToExit
      rm -f $LOCKFILE
      rm -f $PIDFILE
    else
      echo "  ms not running."
    fi
    echo
  ;;

  status)
    status=$(cd <%=@prism_path%>;    <%=@prism_path%>/bin/prism servicestatus ms PIDFILE=<%=@prism_path%>/var/run/voxeo-ms.pid )
    echo $status | grep -q "running"

    if [ $? = 1 ];then
      echo $status
      exit 3
    else
      echo $status
      exit 0
    fi
  ;;

  restart)
    $0 stop
    $0 start
  ;;

  reload)
    echo -n "Reloading ms: "
    killproc voxeo-ms -HUP
    echo
  ;;

  *)
    echo "Usage: $0 {start|stop|restart|reload|status}"
    exit 1
esac
