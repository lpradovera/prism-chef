#!/bin/sh
# Auto-generated by Chef for <%= node[:fqdn] %>
#
# Startup script for program
#
# chkconfig: 35 55 25
# description: Prism Service Control Manager
# processname: smanager
# pidfile: <%=node["prism"]["path"]["prism"]%><%=node["prism"]["pid"]%>/voxeo-smanager.pid

# Source function library.      This creates the operating environment for the process to be started
. /etc/init.d/functions

WaitForPidToExit() {
    # check for a maximum of 60 seconds
    local retry=60
    local pid=`cat $PIDFILE`
    local foundpid=

    foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
    while [ -n "$foundpid" -a "$retry" -gt 0 ]; do
        sleep 1
        echo -n "."
        retry=$(($retry -1))
        foundpid=$(ps -ef | grep $pid | awk '!/grep/ {print $2}')
    done

    # if Process still running, kill it
    if [ -n "$foundpid" ] ; then
        echo ""
        echo $pid " is still running.  Kill it."
        kill -9 `ps -ef | grep $pid | awk '!/grep/ {print $2}'`
    fi
}

PIDFILE=<%=node["prism"]["path"]["prism"]%><%=node["prism"]["pid"]%>/voxeo-smanager.pid
LOCKFILE=<%=node["prism"]["path"]["prism"]%><%=node["prism"]["lock"]%>/voxeo-smanager

CURRENT_USER=`id -u -n`

case "$1" in
  start)
    echo -n "Starting  smanager: "

    if [ -e $PIDFILE ]; then
      pid=`cat $PIDFILE`
      result=$(ps ax -o pid,command | grep $pid | grep smanager)

      if [ "$result" != "" ]; then
        echo "  smanager Already running.  Stop it first."
        exit 1
      fi
    fi

    export HOME=<%=node["prism"]["path"]["prism"]%>
    export LD_LIBRARY_PATH=<%=node["prism"]["path"]["prism"]%>/bin:<%=node["prism"]["path"]["prism"]%>/lib:$LD_LIBRARY_PATH$

    if [ "$CURRENT_USER" = <%=node["prism"]["user"]%> ]; then
      cd <%=node["prism"]["path"]["prism"]%>/bin; <%=node["prism"]["path"]["prism"]%>/bin/prism service smanager PIDFILE=$PIDFILE 2>&1 >>/dev/null
    else
      cd <%=node["prism"]["path"]["prism"]%>/bin; su <%=node["prism"]["user"]%> -p -s /bin/sh -c "<%=node["prism"]["path"]["prism"]%>/bin/prism service smanager PIDFILE=$PIDFILE 2>&1 >>/dev/null"
    fi

    echo
    touch $LOCKFILE
  ;;

  stop)
    echo -n "Shutting down smanager: "
    if [ -e $PIDFILE ]; then
      kill `cat $PIDFILE`
      WaitForPidToExit
    else
      echo "  smanager not running."
    fi
    echo

    rm -f $LOCKFILE
    rm -f $PIDFILE
  ;;

  status)
    status=$(cd <%=node["prism"]["path"]["prism"]%>;    <%=node["prism"]["path"]["prism"]%>/bin/prism servicestatus smanager PIDFILE=<%=node["prism"]["path"]["prism"]%>/var/run/voxeo-smanager.pid )
    echo $status | grep -q "running"

    if [ $? = 1 ];then
      echo $status
      exit 3
    else
      echo $status
      exit 0
    fi
  ;;

  restart)
    $0 stop
    $0 start
  ;;

  reload)
    echo -n "Reloading smanager: "
    killproc voxeo-smanager -HUP
    echo
  ;;

  *)
    echo "Usage: $0 {start|stop|restart|reload|status}"
    exit 1
esac
